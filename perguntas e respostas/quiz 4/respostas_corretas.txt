["O termo evoca a imagem de arquitetos que definem regras e padrões sem experiência prática recente em programação.", "O termo pode sugerir uma separação indesejável entre o papel de arquiteto e o de desenvolvedor."],
["Pessoas técnicas devem ser familiarizadas e confortáveis com a programação."],
["O entendimento comum de como o sistema funciona entre os desenvolvedores experientes.", "A natureza social e colaborativa da compreensão da estrutura do software."],
["Os diagramas e documentos são representações da arquitetura, frequentemente imperfeitas.", "O valor principal reside no entendimento compartilhado, e a documentação é um artefato secundário."],
["As decisões de design que são difíceis de modificar em um estágio posterior do projeto.", "As preocupações que são consideradas mais importantes pela liderança técnica do projeto."],
["Acúmulo de dificuldades para adicionar novas funcionalidades no futuro.", "Potencial comprometimento da capacidade de responder a mudanças e manter a competitividade a longo prazo."],
["A negligência do design leva a uma progressiva dificuldade e lentidão na adição de novas funcionalidades.", "Um bom design inicial garante que o software seja sempre fácil de manter e evoluir."],
["A sustentação da capacidade de entregar novas funcionalidades de forma eficiente e rápida ao longo do tempo.", "A proteção contra a obsolescência tecnológica e a garantia de longevidade do software."],
["A identificação e o tratamento das partes mais importantes do sistema.", "A priorização das qualidades não funcionais do software, como escalabilidade e segurança."],
["Ela influencia diretamente a facilidade e o custo de realizar mudanças e adicionar novas funcionalidades.", "Ela permite que o software se adapte mais facilmente a novas tecnologias e requisitos."],
["O custo implícito de retrabalho adicional causado por escolher uma solução fácil ou limitada agora, em vez de uma abordagem melhor que levaria mais tempo."],
["Se não forem pagas, ambas podem acumular \"juros\", tornando as coisas mais difíceis no futuro.", "Em certas situações, contrair ambas pode ser uma decisão estratégica e benéfica."],
["Na forma como o \"credor\" lida com a dívida; na dívida técnica, o \"empréstimo\" é feito a nós mesmos no futuro, tornando a cobrança menos rigorosa."],
["Dificuldade crescente para realizar mudanças e adicionar novas funcionalidades.", "Aumento do tempo e do custo necessários para corrigir bugs e manter o sistema.", "Possibilidade de o desenvolvimento de novas funcionalidades ser mais lento do que a correção de problemas existentes."],
["A urgência e a utilidade de realizar mudanças ou melhorias em partes específicas do sistema."],
["Escrever código que funciona, mas não é ideal em termos de design, em uma parte do sistema que não muda com frequência."],
["Deferir o uso de testes automatizados, mas utilizar testes manuais."],
["A ausência de testes e design, adotando uma abordagem puramente tática para as mudanças."],
["O crescimento incremental de \"cruft\" (deterioração do código).", "A falha em iniciar e manter um senso de design ao longo da vida do sistema.", "Pressões de negócios (prazos apertados que levam a soluções rápidas e de baixa qualidade)."],
["Trabalhar com alta qualidade, minimizando sempre a dívida técnica, para que o código seja um lugar de trabalho de alta qualidade e facilmente mantido."],
["Uma API deve fazer uma coisa e fazê-la bem."],
["A funcionalidade da API deve ser fácil de explicar."],
["Os nomes comunicam o propósito e a funcionalidade da API."],
["Uma API deve ser tão pequena quanto possível, mas não menor do que o necessário para satisfazer seus requisitos."],
["Confunde os usuários e inibe a liberdade dos implementadores de alterar a implementação no futuro."],
["Maximiza o encapsulamento (information hiding) e minimiza o acoplamento entre APIs."],
["Nomes consistentes e simétricos tornam a API mais fácil de aprender e usar, e o código mais legível."],
["A documentação é crucial para o reuso da API, complementando um bom design."],
["Os erros devem ser reportados ao usuário da API o mais cedo possível após ocorrerem."],
["Isso evita a criação de código boilerplate (repetitivo), que é propenso a erros, feio e irritante."],